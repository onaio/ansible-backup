---
- set_fact:
    _backup_profile_name: "{{item.name}}"
    _backup_profile_user: "{{item.user|default(backup_user)}}"
    _backup_profile_group: "{{item.group|default(backup_group)}}"
    _backup_action_type: "pre"

- name: backup-configure | Create profile directories
  file: path={{backup_home}}/{{item.name}} state=directory mode=0700 owner={{_backup_profile_user}} group={{_backup_profile_group}}

- name: backup-configure | Configure profile
  template: src=conf.j2 dest={{backup_home}}/{{item.name}}/conf owner={{_backup_profile_user}} group={{_backup_profile_group}}

- name: backup-configure | Configure exclude lists
  template: src=exclude.j2 dest={{backup_home}}/{{item.name}}/exclude owner={{_backup_profile_user}} group={{_backup_profile_group}}

- name: backup-configure | Configure pre scripts
  template: src=pre.j2 dest={{backup_home}}/{{item.name}}/pre owner={{_backup_profile_user}} group={{_backup_profile_group}}

- name: backup-configure | Configure profile pre actions
  include_tasks: configure-hook-actions.yml
  with_items: "{{item.pre_actions}}"
  when: item.pre_actions is defined
  loop_control:
    loop_var: "_backup_hook_action"

- set_fact:
    _backup_action_type: "post"

- name: backup-configure | Configure post scripts
  template: src=post.j2 dest={{backup_home}}/{{item.name}}/post owner={{_backup_profile_user}} group={{_backup_profile_group}}

- name: backup-configure | Configure profile post actions
  include_tasks: configure-hook-actions.yml
  with_items: "{{item.post_actions}}"
  when: item.post_actions is defined
  loop_control:
    loop_var: "_backup_hook_action"

- name: backup-configure | Configure restore scripts
  template: src=restore.j2 dest={{backup_home}}/{{item.name}}/restore owner={{_backup_profile_user}} group={{_backup_profile_group}}

- name: backup-configure | Create work directories
  file: state=directory path={{backup_work}}/{{item.name}} owner={{_backup_profile_user}} group={{_backup_profile_group}}

- name: backup-configure | Create log files
  file: state=touch path={{backup_logdir}}/{{item.name}}.log owner={{_backup_profile_user}} group={{_backup_profile_group}}
  changed_when: False

- name: backup-configure | Copy the GPG public key into the profile
  become: true
  become_user: "{{_backup_profile_user}}"
  copy: dest={{backup_home}}/{{item.name}}/gpgkey.{{item.gpg_key}}.pub.asc src={{item.gpg_public_key_src}} mode=0700
  when: item.gpg_public_key_src is defined

- name: backup-configure | Copy the GPG private key into the profile
  become: true
  become_user: "{{_backup_profile_user}}"
  copy: dest={{backup_home}}/{{item.name}}/gpgkey.{{item.gpg_key}}.sec.asc src={{item.gpg_private_key_src}} mode=0700
  when: item.gpg_private_key_src is defined

- name: backup-configure | test backup
  become: true
  become_user: "{{_backup_profile_user}}"
  shell: "echo '{{backup_gpg_pw}}' | duply {{item.name}} backup"
  when: backup_initial_run|bool
